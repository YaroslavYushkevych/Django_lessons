Функции API низкого уровня для кэширования

Для более тонкой настройки и использования механизма кэширования в Django имеются весьма полезные функции, которые
 составляют уровень API для кэширования. Основные из них, следующие:
cache.set() – сохранение произвольных данных в кэш по ключу;
cache.get() – выбор произвольных данных из кэша по ключу;
cache.add() – заносит новое значение в кэш, если его там еще нет (иначе данная операция игнорируется);
cache.get_or_set() – извлекает данные из кэша, если их нет, то автоматически заносится значение по умолчанию;
cache.delete() – удаление данных из кэша по ключу;
cache.clear() – полная очистка кэша.

Давайте воспользуемся этим функционалом и закэшируем данные рубрик. Откроем файл women/utils.py,
 где сначала импортируем модуль:
from django.core.cache import cache

А, затем, в классе DataMixin будем делать выборку категорий из кэша с помощью функции get():
        cats = cache.get('cats')
        if not cats:
            cats = Category.objects.annotate(Count('women'))
            cache.set('cats', cats, 60)

Далее, мы проверяем, если данные из кэша не были получены (это значит, что они туда либо не были помещены,
 либо истекло время кэша), то выполняем чтение из БД и заносим данные в кэш с помощью функции set().